@using Microsoft.AspNetCore.Components.Web.Virtualization

@typeparam TItem
@attribute [CascadingTypeParameter(nameof(TItem))]

<CascadingValue IsFixed="true" Value="this">@ChildContent</CascadingValue>

<div class="table-container column">
	<table class="row">
		<tbody class="table-rows" tabindex="-1">
			@if (ChildContent is not null && Items?.Count() > 0)
			{
				<Virtualize Items="Items" Context="item" ItemSize="@((float)89.175)">
					<tr @key="item.GetHashCode()" class="table-row" @onclick:stopPropagation="true" @onclick="(_ => OnClickedEventHandler(item))" @oncontextmenu="(_ => OnContextMenuEventHandler(item))" @oncontextmenu:preventDefault="true">
						<div class="table-row-checkbox" hidden="@checkBoxHidden">
						{
							<div class="table-cell column" style="width: @(column.Width ?? 100)%">
								<div class="table-cell-header row">
									<th>
										@column.Header
									</th>
								</div>

						<CascadingValue Value="item" IsFixed="true">@ChildContent(item)</CascadingValue>
									<td>
										@column.GetCellValue(item)
									</td>
								</div>
							</div>
						}
					</tr>
				</Virtualize>
			}
		</tbody>
	</table>
</div>

@code {
	private List<TItem> selectedItems = new();
	private bool checkBoxHidden = true;

	[Parameter]
	public RenderFragment<TItem>? ChildContent { get; set; }

	[Parameter]
	public ICollection<TItem>? Items { get; set; }

	[Parameter]
	public EventCallback ItemClicked { get; set; }

	[Parameter]
	public EventCallback ItemRightClicked { get; set; }

	internal void AddTableRow(TableColumn<TItem> column)
	{
		columns.Add(column);
	}

	private async Task OnClickedEventHandler(TItem item)
	{
		await ItemClicked.InvokeAsync(item);
	}

	private async Task OnContextMenuEventHandler(TItem item)
	{
		await ItemRightClicked.InvokeAsync(item);
	}
}