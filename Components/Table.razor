@typeparam TItem

<CascadingValue IsFixed="true" Value="this">@ChildContent</CascadingValue>

<div class="table-container column">
	<table class="row">
		<tbody class="table-rows">
			@if (ChildContent is not null)
			{
				foreach (var item in Items ?? Enumerable.Empty<TItem>())
				{
					<tr @key="item.GetHashCode()" class="table-row" @onclick:stopPropagation="true" @onclick="(async () => await ItemClickedAsync(item))">
								
						@foreach (var column in columns)
						{
							<td class="table-data column">
								@column.GetCellValue(item)
							</td>
						}
					</tr>
				}
			}
		</tbody>
	</table>
</div>

@code {
	private List<TableColumn<TItem>> columns = new List<TableColumn<TItem>>();

	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	[Parameter]
	public IEnumerable<TItem>? Items { get; set; }

	[Parameter]
	public EventCallback ItemClicked { get; set; }

	internal void AddTableRow(TableColumn<TItem> column)
	{
		columns.Add(column);
	}

	private async Task ItemClickedAsync(TItem item)
	{
		await ItemClicked.InvokeAsync(item);
	}
}