@using Microsoft.AspNetCore.Components.Web.Virtualization
@using System.ComponentModel

@typeparam TItem
@attribute [CascadingTypeParameter(nameof(TItem))]

<div class="table-container column">
	<table class="row">
		<tbody class="table-rows" tabindex="-1">
			@if (ChildContent is not null && Items?.Count() > 0)
			{
				<Virtualize Items="Items" Context="item" ItemSize="@((float)89.175)">
					<tr class="table-row" 
					@key="item.GetHashCode()" 
					@onclick:stopPropagation="true"
					@onclick="(_ => OnClickedEventHandler(item))"
					@oncontextmenu="(e => OnContextMenuEventHandler(e, item))"
					@oncontextmenu:preventDefault="true">
						<div class="table-row-checkbox" hidden="@checkBoxHidden">
							<input type="checkbox" checked="@(SelectedItems?.Contains(item))">
						</div>

						<CascadingValue Value="item" IsFixed="true">@ChildContent(item)</CascadingValue>
					</tr>
				</Virtualize>
			}
		</tbody>
	</table>
</div>

@code {
	private bool checkBoxHidden = true;

	public BindingList<TItem> SelectedItems { get; init; } = new();

	[Parameter]
	public RenderFragment<TItem>? ChildContent { get; set; }

	[Parameter]
	public ICollection<TItem>? Items { get; set; }

	[Parameter]
	public EventCallback<TItem> ItemClickedEvent { get; set; }

	[Parameter]
	public EventCallback<SelectionChangedEventArgs<TItem>> SelectionChangedEvent { get; set; }

	[Parameter]
	public EventCallback<ItemClickedEventArgs<TItem>> ItemRightClickedEvent { get; set; }

	[Parameter]
	public SelectionMode? SelectionMode { get; set; }

	protected override void OnInitialized()
	{
		SelectedItems.ListChanged += (_, _) =>
		{
			if (SelectedItems.Count is 0) checkBoxHidden = true;
			else checkBoxHidden = false;
		};
		base.OnInitialized();
	}

	private async Task OnClickedEventHandler(TItem item)
	{
		if (SelectionMode != Components.SelectionMode.None)
		{
			if (SelectionMode == Components.SelectionMode.Multiple || SelectedItems.Count > 0)
			{
				SelectionChangedEventArgs<TItem> args;
				checkBoxHidden = false;

				if (SelectedItems?.Contains(item) ?? false)
				{
					SelectedItems.Remove(item);
					args = new() { RemovedItem = item };

					if (SelectedItems.Count is 0)
					{
						checkBoxHidden = true;
					}
				}

				else
				{
					SelectedItems?.Add(item);
					args = new() { AddedItem = item };
				}

				await SelectionChangedEvent.InvokeAsync(args);
			}

			else await ItemClickedEvent.InvokeAsync(item);
		}
	}

	private Task OnContextMenuEventHandler(MouseEventArgs args, TItem item)
	{
		var rightClickedEventArgs = new ItemClickedEventArgs<TItem>(args)
		{
			Item = item
		};
		return ItemRightClickedEvent.InvokeAsync(rightClickedEventArgs);
	}
}