@using System.Linq.Expressions
@typeparam TItem

<div tabindex="0" class="dropdown-container column" @onfocusout="DropdownFocusOutEventHandler">
	<div class="dropdown-label row">
		<label>@Label</label>
	</div>

	<div class="dropdown-button row" @onclick="DropdownButtonClickedEventHandler">
		@if (Value is not null && compiledExpression(Value) is object compiledValue)
		{
			var placeHolder = compiledValue.ToString();

			if (string.IsNullOrEmpty(placeHolder) is not true)
			{
				<p>@placeHolder</p>
			}

			else
			{
				<p class="placeholder">@Placeholder</p>
			}
		}
	</div>

	<div class="dropdown row" hidden="@hidden">
		<div class="dropdown-items column">
			@foreach (var item in Items ?? Enumerable.Empty<TItem>())
			{
				<div @key="item.GetHashCode()" class="dropdown-item row" @onclick="@(async () => await DropdownItemClickedEventHandler(item))">@compiledExpression(item)</div>
			}
		</div>
	</div>
</div>

@code {
	private Func<TItem, object> compiledExpression = null!;
	private bool hidden = true;

	[Parameter]
	public string? Label { get; set; }

	[Parameter]
	public string? Placeholder { get; set; }

	[Parameter]
	public TItem? Value { get; set; }

	[Parameter]
	public IEnumerable<TItem>? Items { get; set; }

	[Parameter]
	public EventCallback<TItem> ValueChanged { get; set; }

	[Parameter, EditorRequired]
	public Expression<Func<TItem, object>>? Expression { get; set; }

	protected override void OnParametersSet()
	{
		ArgumentNullException.ThrowIfNull(Expression);
		compiledExpression = Expression.Compile();
		base.OnParametersSet();
	}

	private void DropdownButtonClickedEventHandler()
	{
		hidden = !hidden;
	}

	private void DropdownFocusOutEventHandler()
	{
		hidden = true;
	}

	private async Task DropdownItemClickedEventHandler(TItem item)
	{
		hidden = true;
		await ValueChanged.InvokeAsync(item);
		Placeholder = compiledExpression(item).ToString();
	}
}
