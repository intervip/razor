@using System.Diagnostics.CodeAnalysis
@using System.Reflection
@typeparam TItem

<div tabindex="0" class="dropdown-container column" @onfocusout="@(_ => hidden = true)">
	<div class="dropdown-label row">
		<label>@Label</label>
	</div>
	
	@if (ChildContent is not null)
	{
		<div class="dropdown-button row" @onclick="@(_ => hidden = !hidden)">
			@if (string.IsNullOrEmpty(propertyValue?.ToString()))
			{
				<p class="placeholder">@Placeholder</p>
			}

			else
			{
				<p>@ChildContent(Value!)</p>
			}
		</div>

		<div class="dropdown row" hidden="@hidden">
			<div class="dropdown-items column">
				@foreach (var item in Items ?? Enumerable.Empty<TItem>())
				{
					<div @key="item.GetHashCode()" class="dropdown-item row" @onclick="@(_ => DropdownItemOnClickEventHandler(item))">
						@ChildContent(item)
					</div>
				}
			</div>
		</div>
	}
</div>

@code {
	private object? propertyValue;
	private bool hidden = true;

	[Parameter]
	public string? Label { get; set; }

	[Parameter]
	public string? Placeholder { get; set; }

	[Parameter]
	public TItem? Value { get; set; }

	[Parameter, AllowNull]
	public IEnumerable<TItem>? Items { get; set; }

	[Parameter, EditorRequired]
	public RenderFragment<TItem>? ChildContent { get; set; }

	[Parameter]
	public string? PropertyName { get; set; }

	[Parameter]
	public EventCallback<TItem> ValueChanged { get; set; }

	protected override void OnInitialized()
	{
		propertyValue = Value?.GetType().GetProperty(PropertyName ?? string.Empty)?.GetValue(Value, null);
		base.OnInitialized();
	}

	private async Task DropdownItemOnClickEventHandler(TItem item)
	{
		hidden = true;
		await ValueChanged.InvokeAsync(item);
	}
}
