@using Microsoft.AspNetCore.Components.Forms;
@using System.Diagnostics.CodeAnalysis

@typeparam TValue
@inherits InputBase<TValue>

<div class="text-box-container column">
	<div class="text-box-label row">
		<label>@Label</label>
	</div>

	<div class="text-box row">
		<input @bind="CurrentValueAsString" @bind:event="oninput" placeholder="@Placeholder" />
	</div>
</div>

@code {
	[Parameter]
	public string? Placeholder { get; set; }

	[Parameter]
	public string? Label { get; set; }

	protected override bool TryParseValueFromString(
		string? value,
		out TValue? result,
		[NotNullWhen(false)] out string? validationErrorMessage)
	{
		if (string.IsNullOrEmpty(value))
		{
			result = default(TValue);
			validationErrorMessage = null;
			return true;
		}

		if (typeof(TValue) == typeof(string))
		{
			result = (TValue)(object)value;
			validationErrorMessage = null;
			return true;
		}

		if (typeof(TValue) == typeof(int) || typeof(TValue) == typeof(int?))
		{
			if (int.TryParse(value, out var resultInt))
			{
				result = (TValue)(object)resultInt;
				validationErrorMessage = null;
				return true;
			}
		}

		validationErrorMessage = $"Could not parse from type string to {typeof(TValue)}";
		result = default(TValue);
		return false;
	}
}
