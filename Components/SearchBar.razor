@using System.Linq.Expressions
@typeparam TItem

<div class="search column" @onfocusout="FocusOut">
	<div class="search-bar-content row">
		<div class="search-bar column">
			<input type="text" @bind="value" @oninput="InputValueChanged" spellcheck="false" placeholder="@Placeholder" />
		</div>

		<div class="search-button column">
			<div class="search-button-icon row">
				<EvaIcon Icon="EvaIcons.Search"></EvaIcon>
			</div>
		</div>
	</div>
	
	<div class="search-bar-dropdown row">
		<div class="dropdown-items">
			@foreach(var item in items ?? Enumerable.Empty<TItem>())
			{
				<div class="dropdown-item" @onmousedown="(async () => await SelectionChangedAsync(item))">@compiledExpression(item)</div>
			}
		</div>
	</div>
</div>

@code {
	private Func<TItem, string> compiledExpression = null!;
	private IEnumerable<TItem>? items = null;
	private string? value = null;

	[Parameter]
	public string? Placeholder { get; set; }

	[Parameter]
	public int MaxItems { get; set; } = 25;

	[Parameter]
	public IEnumerable<TItem>? Items { get; set; }

	[Parameter, EditorRequired]
	public Expression<Func<TItem, string>>? Expression { get; set; }

	[Parameter]
	public EventCallback SelectionChangedEvent { get; set; }

	protected override void OnParametersSet()
	{
		ArgumentNullException.ThrowIfNull(Expression);
		compiledExpression = Expression.Compile();
		base.OnParametersSet();
	}

	private void InputValueChanged(ChangeEventArgs e)
	{
		items = null;

		if (Items is not null && string.IsNullOrEmpty(e.Value?.ToString()) is false)
		{
			var text = e.Value?.ToString().Normalize(removeDiacritics: true) ?? string.Empty;
			items = Items.Where(item => compiledExpression(item).Contains(text, StringComparison.InvariantCultureIgnoreCase)).Take(MaxItems);
		}

		StateHasChanged();
	}

	private async Task SelectionChangedAsync(TItem item)
	{
		value = compiledExpression(item);
		await SelectionChangedEvent.InvokeAsync(item);
	}

	private void FocusOut()
	{
		items = null;
		StateHasChanged();
	}
}
